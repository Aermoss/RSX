include "rsxio", "rsxglm", "rsxrvr", "rsxglfw", "rsxgl" : *;

int main() {
    glfwInit();
    rvr::RVRInit();
    int window = glfwCreateWindow(1200, 600, "RSX-R");
    glfwMakeContextCurrent(window);
    glfwSwapInterval(1);
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);

    float nearClip = 0.1f, farClip = 100.0f;

    rvr::RVRSetupStereoRenderTargets();
    rvr::RVRInitControllers();
    rvr::RVRInitEyes(nearClip, farClip);

    float r = 0.0f, g = 0.0f, b = 0.0f;
    float value = 0.1f;

    while (!glfwWindowShouldClose(window)) {
        glfwPollEvents();
        rvr::RVRPollEvents();

        for (int controller = 0; controller <= 1; controller += 1) {
            if (rvr::RVRGetControllerGripClickState(controller)) {
                if (controller == 0) {
                    r = 0.5f, g = 0.0f, b = 0.0f;
                } else {
                    r = 0.0f, g = 0.0f, b = 0.5f;
                }

                rvr::RVRTriggerHapticVibration(controller, 1.0f, 4.0f, 1.0f);
            }

            if (rvr::RVRGetControllerTriggerClickState(controller)) {
                r = 0.0f, g = 0.0f, b = 0.0f;
            }
        }

        glClearColor(r, g, b, 1.0f);

        for (int eye = 0; eye <= 1; eye += 1) {
            rvr::RVRBeginRendering(eye);
    
            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
            glEnable(GL_DEPTH_TEST);

            rvr::RVRRenderControllers();
            rvr::RVREndRendering();
        }

        rvr::RVRSubmitFramebufferDescriptorsToCompositor();
        glfwSwapBuffers(window);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
        rvr::RVRUpdateHMDPoseMatrix();
    }

    rvr::RVRShutdown();
    rvr::RVRDeleteFramebufferDescriptors();
    glfwDestroyWindow();
    glfwTerminate();
    return 0;
}